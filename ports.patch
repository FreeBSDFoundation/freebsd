Index: devel/libgtop/files/patch-ino64
===================================================================
--- devel/libgtop/files/patch-ino64	(nonexistent)
+++ devel/libgtop/files/patch-ino64	(working copy)
@@ -0,0 +1,41 @@
+--- sysdeps/freebsd/procopenfiles.c.orig	2014-10-12 07:17:26.000000000 +0000
++++ sysdeps/freebsd/procopenfiles.c	2017-04-22 17:17:54.862169000 +0000
+@@ -322,12 +322,12 @@
+ 				struct sockaddr_un *sun;
+ 
+ 				entry.type = GLIBTOP_FILE_TYPE_LOCALSOCKET;
+-				sun = (struct sockaddr_un *)&kif->kf_sa_local;
++				sun = (struct sockaddr_un *)&kif->kf_un.kf_sock.kf_sa_local;
+ 
+ 				if (sun->sun_path[0]) {
+ 					char *addrstr;
+ 
+-					addrstr = addr_to_string(&kif->kf_sa_local);
++					addrstr = addr_to_string(&kif->kf_un.kf_sock.kf_sa_local);
+ 					g_strlcpy(entry.info.localsock.name,
+ 						  addrstr,
+ 						  sizeof(entry.info.localsock.name));
+@@ -335,7 +335,7 @@
+ 				} else {
+ 					char *addrstr;
+ 
+-					addrstr = addr_to_string(&kif->kf_sa_peer);
++					addrstr = addr_to_string(&kif->kf_un.kf_sock.kf_sa_peer);
+ 					g_strlcpy(entry.info.localsock.name,
+ 						  addrstr,
+ 						  sizeof(entry.info.localsock.name));
+@@ -349,12 +349,12 @@
+ 					entry.type = GLIBTOP_FILE_TYPE_INETSOCKET;
+ 				else
+ 					entry.type = GLIBTOP_FILE_TYPE_INET6SOCKET;
+-				addrstr = addr_to_string(&kif->kf_sa_peer);
++				addrstr = addr_to_string(&kif->kf_un.kf_sock.kf_sa_peer);
+ 				g_strlcpy(entry.info.sock.dest_host,
+ 					  addrstr,
+ 					  sizeof(entry.info.sock.dest_host));
+ 				g_free(addrstr);
+-				entry.info.sock.dest_port = addr_to_port(&kif->kf_sa_peer);
++				entry.info.sock.dest_port = addr_to_port(&kif->kf_un.kf_sock.kf_sa_peer);
+ 			}
+ 		} else if (kif->kf_type == KF_TYPE_PIPE) {
+ 			entry.type = GLIBTOP_FILE_TYPE_PIPE;

Property changes on: devel/libgtop/files/patch-ino64
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: devel/llvm39/Makefile
===================================================================
--- devel/llvm39/Makefile	(revision 440917)
+++ devel/llvm39/Makefile	(working copy)
@@ -339,6 +339,7 @@
 
 post-patch-COMPILER_RT-on:
 	cd ${WRKSRC_compiler_rt} && patch < ${PATCHDIR}/compiler-rt-patch-svn-294806
+	cd ${WRKSRC_compiler_rt} && patch < ${PATCHDIR}/compiler-rt-patch-ino64
 
 post-build-COMPILER_RT-on:
 	${MKDIR} ${WRKDIR}/compiler-rt-build
Index: devel/llvm39/files/compiler-rt-patch-ino64
===================================================================
--- devel/llvm39/files/compiler-rt-patch-ino64	(nonexistent)
+++ devel/llvm39/files/compiler-rt-patch-ino64	(working copy)
@@ -0,0 +1,49 @@
+diff --git lib/sanitizer_common/sanitizer_linux.cc lib/sanitizer_common/sanitizer_linux.cc
+index 7328a5c0ac1..4b59a39ee27 100644
+--- lib/sanitizer_common/sanitizer_linux.cc
++++ lib/sanitizer_common/sanitizer_linux.cc
+@@ -223,7 +223,8 @@ static void kernel_stat_to_stat(struct kernel_stat *in, struct stat *out) {
+ 
+ uptr internal_stat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(stat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                          (uptr)buf, 0);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                           (uptr)buf, 0);
+@@ -247,7 +248,8 @@ uptr internal_stat(const char *path, void *buf) {
+ 
+ uptr internal_lstat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(lstat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                         (uptr)buf, AT_SYMLINK_NOFOLLOW);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                          (uptr)buf, AT_SYMLINK_NOFOLLOW);
+@@ -590,7 +592,9 @@ uptr internal_getppid() {
+ }
+ 
+ uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count) {
+-#if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
++#if SANITIZER_FREEBSD
++  return internal_syscall(SYSCALL(getdirentries), fd, (uptr)dirp, count, NULL);
++#elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(getdents64), fd, (uptr)dirp, count);
+ #else
+   return internal_syscall(SYSCALL(getdents), fd, (uptr)dirp, count);
+diff --git lib/sanitizer_common/sanitizer_platform_limits_posix.h lib/sanitizer_common/sanitizer_platform_limits_posix.h
+index 5cbd78d3c1b..d7ce7b501f7 100644
+--- lib/sanitizer_common/sanitizer_platform_limits_posix.h
++++ lib/sanitizer_common/sanitizer_platform_limits_posix.h
+@@ -489,7 +489,8 @@ namespace __sanitizer {
+   };
+ #elif SANITIZER_FREEBSD
+   struct __sanitizer_dirent {
+-    unsigned int d_fileno;
++    unsigned long long d_fileno;
++    unsigned long long d_off;
+     unsigned short d_reclen;
+     // more fields that we don't care about
+   };

Property changes on: devel/llvm39/files/compiler-rt-patch-ino64
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: devel/llvm40/Makefile
===================================================================
--- devel/llvm40/Makefile	(revision 440917)
+++ devel/llvm40/Makefile	(working copy)
@@ -339,6 +339,9 @@
 post-extract-OPENMP-on:
 	${MV} ${WRKSRC_openmp} ${PATCH_WRKSRC}/tools/openmp
 
+post-patch-COMPILER_RT-on:
+	cd ${WRKSRC_compiler_rt} && patch < ${PATCHDIR}/compiler-rt-patch-ino64
+
 post-patch:
 	${REINPLACE_CMD} -e 's|import lit|import lit${LLVM_SUFFIX}|' \
 	    -e 's|from lit|from lit${LLVM_SUFFIX}|' \
Index: devel/llvm40/files/compiler-rt-patch-ino64
===================================================================
--- devel/llvm40/files/compiler-rt-patch-ino64	(nonexistent)
+++ devel/llvm40/files/compiler-rt-patch-ino64	(working copy)
@@ -0,0 +1,49 @@
+diff --git lib/sanitizer_common/sanitizer_linux.cc lib/sanitizer_common/sanitizer_linux.cc
+index 7328a5c0ac1..4b59a39ee27 100644
+--- lib/sanitizer_common/sanitizer_linux.cc
++++ lib/sanitizer_common/sanitizer_linux.cc
+@@ -223,7 +223,8 @@ static void kernel_stat_to_stat(struct kernel_stat *in, struct stat *out) {
+ 
+ uptr internal_stat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(stat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                          (uptr)buf, 0);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                           (uptr)buf, 0);
+@@ -247,7 +248,8 @@ uptr internal_stat(const char *path, void *buf) {
+ 
+ uptr internal_lstat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(lstat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                         (uptr)buf, AT_SYMLINK_NOFOLLOW);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                          (uptr)buf, AT_SYMLINK_NOFOLLOW);
+@@ -590,7 +592,9 @@ uptr internal_getppid() {
+ }
+ 
+ uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count) {
+-#if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
++#if SANITIZER_FREEBSD
++  return internal_syscall(SYSCALL(getdirentries), fd, (uptr)dirp, count, NULL);
++#elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(getdents64), fd, (uptr)dirp, count);
+ #else
+   return internal_syscall(SYSCALL(getdents), fd, (uptr)dirp, count);
+diff --git lib/sanitizer_common/sanitizer_platform_limits_posix.h lib/sanitizer_common/sanitizer_platform_limits_posix.h
+index 5cbd78d3c1b..d7ce7b501f7 100644
+--- lib/sanitizer_common/sanitizer_platform_limits_posix.h
++++ lib/sanitizer_common/sanitizer_platform_limits_posix.h
+@@ -489,7 +489,8 @@ namespace __sanitizer {
+   };
+ #elif SANITIZER_FREEBSD
+   struct __sanitizer_dirent {
+-    unsigned int d_fileno;
++    unsigned long long d_fileno;
++    unsigned long long d_off;
+     unsigned short d_reclen;
+     // more fields that we don't care about
+   };

Property changes on: devel/llvm40/files/compiler-rt-patch-ino64
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: lang/ghc/Makefile
===================================================================
--- lang/ghc/Makefile	(revision 440917)
+++ lang/ghc/Makefile	(working copy)
@@ -239,6 +239,9 @@
 	@${REINPLACE_CMD} -e 's|@SettingsCCompilerFlags@|& -Qunused-arguments|' ${BOOT_DIR}/settings.in
 .endif
 .endif
+.if empty(PORT_OPTIONS:MBOOT)
+	@${REINPLACE_CMD} -e 's|@SettingsCCompilerLinkFlags@|& -Wl,--wrap=readdir_r,--wrap=stat,--wrap=lstat,--wrap=fstat,--wrap=mknod|' ${BOOT_DIR}/settings.in
+.endif
 
 post-install-script:
 	@${FIND} -ds ${GHC_LIBDIR} -type f -print | ${SED} -E -e \
@@ -269,6 +272,13 @@
 
 pre-configure:
 	@${MKDIR} ${TMPDIR}
+.if empty(PORT_OPTIONS:MBOOTH)
+	${CC} ${CFLAGS} -c -o ${BOOT_DIR}/wrap.o ${PATCHDIR}/wrap.c
+	for x in ${BOOT_DIR}/rts/dist/build/libCffi*.a; do \
+	    ${AR} q $$x ${BOOT_DIR}/wrap.o; ${RANLIB} $$x; \
+	done
+	rm ${BOOT_DIR}/wrap.o
+.endif # Do not merge, prev condition need to grow OSVER check.
 .if empty(PORT_OPTIONS:MBOOT)
 	@(cd ${BOOT_DIR} && ${CONFIGURE_ENV} ${CONFIGURE_CMD} ${CONFIGURE_ARGS_BOOT})
 	@(cd ${BOOT_DIR} && PACKAGES='' ${MAKE_CMD} install)
Index: lang/ghc/files/wrap.c
===================================================================
--- lang/ghc/files/wrap.c	(nonexistent)
+++ lang/ghc/files/wrap.c	(working copy)
@@ -0,0 +1,54 @@
+/* -*- ugly-hack-mode -*- */
+
+#include <sys/stat.h>
+
+struct old_dirent;
+struct old_stat;
+
+__asm(".symver	old_readdir_r, readdir_r@FBSD_1.0");
+int old_readdir_r(void *dirp, struct old_dirent *entry,
+    struct old_dirent **result);
+__asm(".symver	old_stat, stat@FBSD_1.0");
+int old_stat(const char * restrict path, struct old_stat * restrict sb);
+__asm(".symver	old_lstat, lstat@FBSD_1.0");
+int old_lstat(const char * restrict path, struct old_stat * restrict sb);
+__asm(".symver	old_fstat, fstat@FBSD_1.0");
+int old_fstat(int fd, struct old_stat *sb);
+__asm(".symver	old_mknod, mknod@FBSD_1.0");
+int old_mknod(const char *path, mode_t mode, uint32_t dev);
+
+int
+__wrap_readdir_r(void *dirp, struct old_dirent *entry,
+    struct old_dirent **result)
+{
+
+	return (old_readdir_r(dirp, entry, result));
+}
+
+int
+__wrap_stat(const char * restrict path, struct old_stat * restrict sb)
+{
+
+	return (old_stat(path, sb));
+}
+
+int
+__wrap_lstat(const char * restrict path, struct old_stat * restrict sb)
+{
+
+	return (old_lstat(path, sb));
+}
+
+int
+__wrap_fstat(int fd, struct old_stat *sb)
+{
+
+	return (old_fstat(fd, sb));
+}
+
+int
+__wrap_mknod(const char *path, mode_t mode, uint32_t dev)
+{
+
+	return (old_mknod(path, mode, dev));
+}

Property changes on: lang/ghc/files/wrap.c
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: lang/rust/Makefile
===================================================================
--- lang/rust/Makefile	(revision 440917)
+++ lang/rust/Makefile	(working copy)
@@ -129,6 +129,9 @@
 		exit 1;\
 	fi
 
+LIBSTD=	rust-std-1.16.0-x86_64-unknown-freebsd/rust-std-x86_64-unknown-freebsd/lib/rustlib/x86_64-unknown-freebsd/lib/libstd-aef6cb139bd07bdc.rlib
+STDF=	std-aef6cb139bd07bdc.0.o
+
 post-extract:
 	@${MKDIR} \
 		${WRKSRC}/build/cache/${RUST_BOOTSTRAP_DIR} \
@@ -135,10 +138,16 @@
 		${WRKSRC}/build/cache/${CARGO_BOOTSTRAP_DIR}
 	${LN} -sf ${DISTDIR}/${DIST_SUBDIR}/${RUSTC_BOOTSTRAP} \
 		${WRKSRC}/build/cache/${RUST_BOOTSTRAP_DIR}
-	${LN} -sf ${DISTDIR}/${DIST_SUBDIR}/${RUST_STD_BOOTSTRAP} \
-		${WRKSRC}/build/cache/${RUST_BOOTSTRAP_DIR}
 	${LN} -sf ${DISTDIR}/${DIST_SUBDIR}/${CARGO_BOOTSTRAP} \
 		${WRKSRC}/build/cache/${CARGO_BOOTSTRAP_DIR}
+	${TAR} -x -C ${WRKSRC} -f ${DISTDIR}/${DIST_SUBDIR}/${RUST_STD_BOOTSTRAP}
+	${CC} ${CFLAGS} -fPIC -c -o ${WRKSRC}/old_fstat.o ${FILESDIR}/old_fstat.c
+	(cd ${WRKSRC} && ${AR} x ${WRKSRC}/${LIBSTD} ${STDF})
+	${LD} -r -o ${WRKSRC}/std.xx.o ${WRKSRC}/${STDF} ${WRKSRC}/old_fstat.o
+	${MV} ${WRKSRC}/std.xx.o ${WRKSRC}/${STDF}
+	(cd ${WRKSRC} && ${AR} r ${WRKSRC}/${LIBSTD} ${STDF})
+	${TAR} -cy -C ${WRKSRC} -f ${WRKSRC}/rustc.tbz rust-std-1.16.0-x86_64-unknown-freebsd
+	${MV} ${WRKSRC}/rustc.tbz ${WRKSRC}/build/cache/${RUST_STD_BOOTSTRAP}
 
 post-patch:
 	@test ! -f ${WRKSRC}/mk/main.mk || \
Index: lang/rust/files/old_fstat.c
===================================================================
--- lang/rust/files/old_fstat.c	(nonexistent)
+++ lang/rust/files/old_fstat.c	(working copy)
@@ -0,0 +1,101 @@
+#include <sys/syscall.h>
+#include <dlfcn.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+struct stat;
+
+int
+fstat(int fd, struct stat *sb)
+{
+
+	return (syscall(SYS_freebsd11_fstat, fd, sb));
+}
+
+int
+stat(const char *path, struct stat *sb)
+{
+
+	return (syscall(SYS_freebsd11_stat, path, sb));
+}
+
+int
+lstat(const char *path, struct stat *sb)
+{
+
+	return (syscall(SYS_freebsd11_lstat, path, sb));
+}
+
+int
+fstatat(int fd, const char *path, struct stat *sb, int flag)
+{
+
+	return (syscall(SYS_freebsd11_fstatat, fd, path, sb, flag));
+}
+
+struct ODIR;
+struct freebsd11_dirent;
+
+/*
+__asm(".symver  old_readdir, readdir@FBSD_1.0");
+int old_readdir(struct ODIR *);
+int
+readdir(struct ODIR *dirp)
+{
+
+	return (old_readdir(dirp));
+}
+*/
+
+__asm(".symver  old_readdir_r, readdir_r@FBSD_1.0");
+int old_readdir_r(struct ODIR *, struct freebsd11_dirent *,
+    struct freebsd11_dirent **);
+int
+readdir_r(struct ODIR *dirp, struct freebsd11_dirent *entry,
+    struct freebsd11_dirent **result)
+{
+	void *libc;
+	void *fptr;
+	int error;
+
+	libc = dlopen("libc.so.7", RTLD_LAZY | RTLD_GLOBAL);
+	if (libc == NULL) {
+		fprintf(stderr, "libc open: %s\n", dlerror());
+		abort();
+	}
+	fptr = dlvsym(libc, "readdir_r", "FBSD_1.0");
+	if (fptr == NULL) {
+		fprintf(stderr, "readdir_r: %s\n", dlerror());
+		abort();
+	}
+	error = ((int (*)(struct ODIR *, struct freebsd11_dirent *,
+	    struct freebsd11_dirent **))fptr)(dirp, entry, result);
+	dlclose(libc);
+	return (error);
+}
+
+/*
+__asm(".symver	old_scandir, scandir@FBSD_1.0");
+int old_scandir(const char *, struct freebsd11_dirent ***,
+    int (*)(const struct freebsd11_dirent *),
+    int (*)(const struct freebsd11_dirent **,
+	const struct freebsd11_dirent **));
+int
+scandir(const char *dirname, struct freebsd11_dirent ***namelist,
+    int (*select)(const struct freebsd11_dirent *),
+    int (*dcomp)(const struct freebsd11_dirent **,
+	const struct freebsd11_dirent **))
+{
+
+	return (old_scandir(dirname, namelist, select, dcomp));
+}
+*/
+
+struct old_statfs;
+int
+fstatfs(int fd, struct old_statfs *buf)
+{
+
+	return (syscall(SYS_freebsd11_fstatfs, fd, buf));
+}

Property changes on: lang/rust/files/old_fstat.c
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: lang/rust/files/patch-ino64
===================================================================
--- lang/rust/files/patch-ino64	(nonexistent)
+++ lang/rust/files/patch-ino64	(working copy)
@@ -0,0 +1,309 @@
+--- ./src/liblibc/src/unix/bsd/freebsdlike/freebsd/mod.rs.orig	2017-04-24 18:56:45.000000000 +0000
++++ ./src/liblibc/src/unix/bsd/freebsdlike/freebsd/mod.rs	2017-05-15 12:17:51.828121000 +0000
+@@ -1,8 +1,8 @@
+ pub type fflags_t = u32;
+ pub type clock_t = i32;
+-pub type ino_t = u32;
++pub type ino_t = u64;
+ pub type lwpid_t = i32;
+-pub type nlink_t = u16;
++pub type nlink_t = u64;
+ pub type blksize_t = u32;
+ pub type clockid_t = ::c_int;
+ pub type sem_t = _sem;
+@@ -40,10 +40,12 @@
+     }
+ 
+     pub struct dirent {
+-        pub d_fileno: u32,
++        pub d_fileno: u64,
++        pub d_off: u64,
+         pub d_reclen: u16,
+         pub d_type: u8,
+         pub d_namlen: u8,
++        pub d_pad0: u32,
+         pub d_name: [::c_char; 256],
+     }
+ 
+--- ./src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86.rs.orig	2017-04-24 18:56:45.000000000 +0000
++++ ./src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86.rs	2017-05-15 12:17:51.828413000 +0000
+@@ -7,25 +7,30 @@
+     pub struct stat {
+         pub st_dev: ::dev_t,
+         pub st_ino: ::ino_t,
+-        pub st_mode: ::mode_t,
+         pub st_nlink: ::nlink_t,
++        pub st_mode: ::mode_t,
++        pub st_pad0: ::uint16_t,
+         pub st_uid: ::uid_t,
+         pub st_gid: ::gid_t,
++        pub st_pad1: ::uint32_t,
+         pub st_rdev: ::dev_t,
++        pub st_atime_ext ::i32,
+         pub st_atime: ::time_t,
+         pub st_atime_nsec: ::c_long,
++        pub st_mtime_ext ::i32,
+         pub st_mtime: ::time_t,
+         pub st_mtime_nsec: ::c_long,
++        pub st_ctime_ext ::i32,
+         pub st_ctime: ::time_t,
+         pub st_ctime_nsec: ::c_long,
++        pub st_birthtime_ext ::i32,
++        pub st_birthtime: ::time_t,
++        pub st_birthtime_nsec: ::c_long,
+         pub st_size: ::off_t,
+         pub st_blocks: ::blkcnt_t,
+         pub st_blksize: ::blksize_t,
+         pub st_flags: ::fflags_t,
+-        pub st_gen: ::uint32_t,
+-        pub st_lspare: ::int32_t,
+-        pub st_birthtime: ::time_t,
+-        pub st_birthtime_nsec: ::c_long,
+-        __unused: [u8; 8],
++        pub st_gen: ::uint64_t,
++        pub st_lspare: [::uint64_t; 10],
+     }
+ }
+--- ./src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs.orig	2017-04-24 18:56:45.000000000 +0000
++++ ./src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs	2017-05-15 12:17:51.828700000 +0000
+@@ -7,10 +7,12 @@
+     pub struct stat {
+         pub st_dev: ::dev_t,
+         pub st_ino: ::ino_t,
+-        pub st_mode: ::mode_t,
+         pub st_nlink: ::nlink_t,
++        pub st_mode: ::mode_t,
++        pub st_pad0: ::uint16_t,
+         pub st_uid: ::uid_t,
+         pub st_gid: ::gid_t,
++        pub st_pad1: ::uint32_t,
+         pub st_rdev: ::dev_t,
+         pub st_atime: ::time_t,
+         pub st_atime_nsec: ::c_long,
+@@ -18,13 +20,13 @@
+         pub st_mtime_nsec: ::c_long,
+         pub st_ctime: ::time_t,
+         pub st_ctime_nsec: ::c_long,
++        pub st_birthtime: ::time_t,
++        pub st_birthtime_nsec: ::c_long,
+         pub st_size: ::off_t,
+         pub st_blocks: ::blkcnt_t,
+         pub st_blksize: ::blksize_t,
+         pub st_flags: ::fflags_t,
+-        pub st_gen: ::uint32_t,
+-        pub st_lspare: ::int32_t,
+-        pub st_birthtime: ::time_t,
+-        pub st_birthtime_nsec: ::c_long,
++        pub st_gen: ::uint64_t,
++        pub st_spare: [::int64_t; 10],
+     }
+ }
+--- ./src/liblibc/src/unix/bsd/freebsdlike/mod.rs.orig	2017-04-24 18:56:45.000000000 +0000
++++ ./src/liblibc/src/unix/bsd/freebsdlike/mod.rs	2017-05-15 12:17:51.829170000 +0000
+@@ -1,4 +1,4 @@
+-pub type dev_t = u32;
++pub type dev_t = u64;
+ pub type mode_t = u16;
+ pub type pthread_attr_t = *mut ::c_void;
+ pub type rlim_t = i64;
+--- ./src/libstd/os/freebsd/raw.rs.orig	2017-04-24 18:53:46.000000000 +0000
++++ ./src/libstd/os/freebsd/raw.rs	2017-05-15 12:17:51.831191000 +0000
+@@ -38,32 +38,48 @@
+ #[stable(feature = "raw_ext", since = "1.1.0")]
+ pub struct stat {
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_dev: u32,
++    pub st_dev: u64,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_ino: u32,
++    pub st_ino: u64,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
++    pub st_nlink: u64,
++    #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_mode: u16,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_nlink: u16,
++    pub st_pad0: u16,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_uid: u32,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_gid: u32,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_rdev: u32,
++    pub st_pad1: u32,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
++    pub st_rdev: u64,
++    #[cfg(target_arch = "x86")]
++    pub st_atime_ext: c_long,
++    #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_atime: c_long,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_atime_nsec: c_long,
++    #[cfg(target_arch = "x86")]
++    pub st_mtime_ext: c_long,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_mtime: c_long,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_mtime_nsec: c_long,
++    #[cfg(target_arch = "x86")]
++    pub st_ctime_ext: c_long,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_ctime: c_long,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_ctime_nsec: c_long,
++    #[cfg(target_arch = "x86")]
++    pub st_birthtime_ext: c_long,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
++    pub st_birthtime: c_long,
++    #[stable(feature = "raw_ext", since = "1.1.0")]
++    pub st_birthtime_nsec: c_long,
++    #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_size: i64,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_blocks: i64,
+@@ -72,14 +88,7 @@
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+     pub st_flags: u32,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_gen: u32,
++    pub st_gen: u64,
+     #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_lspare: i32,
+-    #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_birthtime: c_long,
+-    #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub st_birthtime_nsec: c_long,
+-    #[cfg(target_arch = "x86")]
+-    #[stable(feature = "raw_ext", since = "1.1.0")]
+-    pub __unused: [u8; 8],
++    pub st_spare: [u64; 10],
+ }
+--- ./src/libstd/os/freebsd/fs.rs.orig	2017-04-24 18:53:46.000000000 +0000
++++ ./src/libstd/os/freebsd/fs.rs	2017-05-15 12:17:51.831468000 +0000
+@@ -74,8 +74,6 @@
+     fn st_flags(&self) -> u32;
+     #[stable(feature = "metadata_ext2", since = "1.8.0")]
+     fn st_gen(&self) -> u32;
+-    #[stable(feature = "metadata_ext2", since = "1.8.0")]
+-    fn st_lspare(&self) -> u32;
+ }
+ 
+ #[stable(feature = "metadata_ext", since = "1.1.0")]
+@@ -146,9 +144,6 @@
+     }
+     fn st_flags(&self) -> u32 {
+         self.as_inner().as_inner().st_flags as u32
+-    }
+-    fn st_lspare(&self) -> u32 {
+-        self.as_inner().as_inner().st_lspare as u32
+     }
+ }
+ 
+--- ./src/vendor/libc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs.orig	2017-04-24 20:20:26.000000000 +0000
++++ ./src/vendor/libc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs	2017-05-15 12:17:51.829479000 +0000
+@@ -7,10 +7,12 @@
+     pub struct stat {
+         pub st_dev: ::dev_t,
+         pub st_ino: ::ino_t,
+-        pub st_mode: ::mode_t,
+         pub st_nlink: ::nlink_t,
++        pub st_mode: ::mode_t,
++        pub st_pad0: u16,
+         pub st_uid: ::uid_t,
+         pub st_gid: ::gid_t,
++        pub st_pad1: ::u32,
+         pub st_rdev: ::dev_t,
+         pub st_atime: ::time_t,
+         pub st_atime_nsec: ::c_long,
+@@ -18,13 +20,13 @@
+         pub st_mtime_nsec: ::c_long,
+         pub st_ctime: ::time_t,
+         pub st_ctime_nsec: ::c_long,
++        pub st_birthtime: ::time_t,
++        pub st_birthtime_nsec: ::c_long,
+         pub st_size: ::off_t,
+         pub st_blocks: ::blkcnt_t,
+         pub st_blksize: ::blksize_t,
+         pub st_flags: ::fflags_t,
+-        pub st_gen: ::uint32_t,
+-        pub st_lspare: ::int32_t,
+-        pub st_birthtime: ::time_t,
+-        pub st_birthtime_nsec: ::c_long,
++        pub st_gen: ::uint64_t,
++        pub st_spare: [u64; 10],
+     }
+ }
+--- ./src/vendor/libc/src/unix/bsd/freebsdlike/freebsd/mod.rs.orig	2017-04-24 20:20:26.000000000 +0000
++++ ./src/vendor/libc/src/unix/bsd/freebsdlike/freebsd/mod.rs	2017-05-15 12:50:06.459672000 +0000
+@@ -1,8 +1,8 @@
+ pub type fflags_t = u32;
+ pub type clock_t = i32;
+-pub type ino_t = u32;
++pub type ino_t = u64;
+ pub type lwpid_t = i32;
+-pub type nlink_t = u16;
++pub type nlink_t = u64;
+ pub type blksize_t = u32;
+ pub type clockid_t = ::c_int;
+ pub type sem_t = _sem;
+@@ -40,10 +40,12 @@
+     }
+ 
+     pub struct dirent {
+-        pub d_fileno: u32,
++        pub d_fileno: u64,
++        pub d_off: u64,
+         pub d_reclen: u16,
+         pub d_type: u8,
+         pub d_namlen: u8,
++        pub d_pad0: u32,
+         pub d_name: [::c_char; 256],
+     }
+ 
+--- ./src/vendor/libc/src/unix/bsd/freebsdlike/freebsd/x86.rs.orig	2017-04-24 20:20:26.000000000 +0000
++++ ./src/vendor/libc/src/unix/bsd/freebsdlike/freebsd/x86.rs	2017-05-15 12:17:51.830372000 +0000
+@@ -7,25 +7,30 @@
+     pub struct stat {
+         pub st_dev: ::dev_t,
+         pub st_ino: ::ino_t,
+-        pub st_mode: ::mode_t,
+         pub st_nlink: ::nlink_t,
++        pub st_mode: ::mode_t,
++        pub st_pad0: u16,
+         pub st_uid: ::uid_t,
+         pub st_gid: ::gid_t,
++        pub st_pad1: u32,
+         pub st_rdev: ::dev_t,
++        pub st_atime_ext: ::i32,
+         pub st_atime: ::time_t,
+         pub st_atime_nsec: ::c_long,
++        pub st_mtime_ext: ::i32,
+         pub st_mtime: ::time_t,
+         pub st_mtime_nsec: ::c_long,
++        pub st_ctime_ext: ::i32,
+         pub st_ctime: ::time_t,
+         pub st_ctime_nsec: ::c_long,
++        pub st_birthtime_ext: ::i32,
++        pub st_birthtime: ::time_t,
++        pub st_birthtime_nsec: ::c_long,
+         pub st_size: ::off_t,
+         pub st_blocks: ::blkcnt_t,
+         pub st_blksize: ::blksize_t,
+         pub st_flags: ::fflags_t,
+-        pub st_gen: ::uint32_t,
+-        pub st_lspare: ::int32_t,
+-        pub st_birthtime: ::time_t,
+-        pub st_birthtime_nsec: ::c_long,
+-        __unused: [u8; 8],
++        pub st_gen: ::uint64_t,
++        pub st_spare: [u64; 10],
+     }
+ }
+--- ./src/vendor/libc/src/unix/bsd/freebsdlike/mod.rs.orig	2017-04-24 20:20:26.000000000 +0000
++++ ./src/vendor/libc/src/unix/bsd/freebsdlike/mod.rs	2017-05-15 12:17:51.830882000 +0000
+@@ -1,4 +1,4 @@
+-pub type dev_t = u32;
++pub type dev_t = u64;
+ pub type mode_t = u16;
+ pub type pthread_attr_t = *mut ::c_void;
+ pub type rlim_t = i64;

Property changes on: lang/rust/files/patch-ino64
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: multimedia/webcamd/files/patch-ino64
===================================================================
--- multimedia/webcamd/files/patch-ino64	(nonexistent)
+++ multimedia/webcamd/files/patch-ino64	(working copy)
@@ -0,0 +1,43 @@
+--- kernel/linux_func.c.orig	2017-05-07 09:15:00.252932000 +0000
++++ kernel/linux_func.c	2017-05-07 09:16:38.466562000 +0000
+@@ -813,9 +813,9 @@
+ 
+ error:
+ 	printf("Trying to register "
+-	    "unknown device(0x%08x) "
++	    "unknown device(0x%08jx) "
+ 	    "or subdevice(%d) too big.\n",
+-	    mm, (int)subdev);
++	    (uintmax_t)mm, (int)subdev);
+ 	return;
+ }
+ 
+@@ -891,7 +891,7 @@
+ 
+ error:
+ 	printf("Cannot register character "
+-	    "device mm=0x%08x and desc='%s'.\n", mm, desc);
++	    "device mm=0x%08jx and desc='%s'.\n", (uintmax_t)mm, desc);
+ 	return (-1);
+ }
+ 
+@@ -899,7 +899,7 @@
+ unregister_chrdev(dev_t mm, const char *desc)
+ {
+ 	printf("Cannot unregister character "
+-	    "device mm=0x%08x and desc='%s'.\n", mm, desc);
++	    "device mm=0x%08jx and desc='%s'.\n", (uintmax_t)mm, desc);
+ 	return (-1);
+ }
+ 
+--- kernel/linux_defs.h.orig	2017-05-07 09:17:46.386422000 +0000
++++ kernel/linux_defs.h	2017-05-07 09:18:05.156924000 +0000
+@@ -703,7 +703,7 @@
+ 
+ #endif
+ typedef uint32_t gfp_t;
+-typedef uint32_t dev_t;
++typedef uint64_t dev_t;
+ typedef struct timespec ktime_t;
+ 
+ #endif					/* _LINUX_DEFS_H_ */

Property changes on: multimedia/webcamd/files/patch-ino64
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: sysutils/py-psutil/files/patch-ino64
===================================================================
--- sysutils/py-psutil/files/patch-ino64	(nonexistent)
+++ sysutils/py-psutil/files/patch-ino64	(working copy)
@@ -0,0 +1,60 @@
+--- psutil/arch/bsd/freebsd_socks.c.orig	2017-04-22 17:20:07.041427000 +0000
++++ psutil/arch/bsd/freebsd_socks.c	2017-04-22 17:22:50.547756000 +0000
+@@ -148,20 +148,20 @@
+         if (kif->kf_sock_domain == AF_INET) {
+             if (!psutil_sockaddr_matches(
+                     AF_INET, inp->inp_lport, &inp->inp_laddr,
+-                    &kif->kf_sa_local))
++                    &kif->kf_un.kf_sock.kf_sa_local))
+                 continue;
+             if (!psutil_sockaddr_matches(
+                     AF_INET, inp->inp_fport, &inp->inp_faddr,
+-                    &kif->kf_sa_peer))
++                    &kif->kf_un.kf_sock.kf_sa_peer))
+                 continue;
+         } else {
+             if (!psutil_sockaddr_matches(
+                     AF_INET6, inp->inp_lport, &inp->in6p_laddr,
+-                    &kif->kf_sa_local))
++                    &kif->kf_un.kf_sock.kf_sa_local))
+                 continue;
+             if (!psutil_sockaddr_matches(
+                     AF_INET6, inp->inp_fport, &inp->in6p_faddr,
+-                    &kif->kf_sa_peer))
++                    &kif->kf_un.kf_sock.kf_sa_peer))
+                 continue;
+         }
+ 
+@@ -577,19 +577,19 @@
+                 inet_ntop(
+                     kif->kf_sock_domain,
+                     psutil_sockaddr_addr(kif->kf_sock_domain,
+-                                         &kif->kf_sa_local),
++                                         &kif->kf_un.kf_sock.kf_sa_local),
+                     lip,
+                     sizeof(lip));
+                 inet_ntop(
+                     kif->kf_sock_domain,
+                     psutil_sockaddr_addr(kif->kf_sock_domain,
+-                                         &kif->kf_sa_peer),
++                                         &kif->kf_un.kf_sock.kf_sa_peer),
+                     rip,
+                     sizeof(rip));
+                 lport = htons(psutil_sockaddr_port(kif->kf_sock_domain,
+-                                                   &kif->kf_sa_local));
++                                                   &kif->kf_un.kf_sock.kf_sa_local));
+                 rport = htons(psutil_sockaddr_port(kif->kf_sock_domain,
+-                                                   &kif->kf_sa_peer));
++                                                   &kif->kf_un.kf_sock.kf_sa_peer));
+ 
+                 // construct python tuple/list
+                 py_laddr = Py_BuildValue("(si)", lip, lport);
+@@ -620,7 +620,7 @@
+             else if (kif->kf_sock_domain == AF_UNIX) {
+                 struct sockaddr_un *sun;
+ 
+-                sun = (struct sockaddr_un *)&kif->kf_sa_local;
++                sun = (struct sockaddr_un *)&kif->kf_un.kf_sock.kf_sa_local;
+                 snprintf(
+                     path, sizeof(path), "%.*s",
+                     (int)(sun->sun_len - (sizeof(*sun) - sizeof(sun->sun_path))),

Property changes on: sysutils/py-psutil/files/patch-ino64
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
