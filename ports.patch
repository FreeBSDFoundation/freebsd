Index: devel/llvm39/Makefile
===================================================================
--- devel/llvm39/Makefile	(revision 437869)
+++ devel/llvm39/Makefile	(working copy)
@@ -333,6 +333,7 @@
 
 post-patch-COMPILER_RT-on:
 	cd ${WRKSRC_compiler_rt} && patch < ${PATCHDIR}/compiler-rt-patch-svn-294806
+	cd ${WRKSRC_compiler_rt} && patch < ${PATCHDIR}/compiler-rt-patch-ino64
 
 post-build-COMPILER_RT-on:
 	${MKDIR} ${WRKDIR}/compiler-rt-build
Index: devel/llvm39/files/compiler-rt-patch-ino64
===================================================================
--- devel/llvm39/files/compiler-rt-patch-ino64	(nonexistent)
+++ devel/llvm39/files/compiler-rt-patch-ino64	(working copy)
@@ -0,0 +1,49 @@
+diff --git lib/sanitizer_common/sanitizer_linux.cc lib/sanitizer_common/sanitizer_linux.cc
+index 7328a5c0ac1..4b59a39ee27 100644
+--- lib/sanitizer_common/sanitizer_linux.cc
++++ lib/sanitizer_common/sanitizer_linux.cc
+@@ -223,7 +223,8 @@ static void kernel_stat_to_stat(struct kernel_stat *in, struct stat *out) {
+ 
+ uptr internal_stat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(stat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                          (uptr)buf, 0);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                           (uptr)buf, 0);
+@@ -247,7 +248,8 @@ uptr internal_stat(const char *path, void *buf) {
+ 
+ uptr internal_lstat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(lstat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                         (uptr)buf, AT_SYMLINK_NOFOLLOW);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                          (uptr)buf, AT_SYMLINK_NOFOLLOW);
+@@ -590,7 +592,9 @@ uptr internal_getppid() {
+ }
+ 
+ uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count) {
+-#if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
++#if SANITIZER_FREEBSD
++  return internal_syscall(SYSCALL(getdirentries), fd, (uptr)dirp, count, NULL);
++#elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(getdents64), fd, (uptr)dirp, count);
+ #else
+   return internal_syscall(SYSCALL(getdents), fd, (uptr)dirp, count);
+diff --git lib/sanitizer_common/sanitizer_platform_limits_posix.h lib/sanitizer_common/sanitizer_platform_limits_posix.h
+index 5cbd78d3c1b..d7ce7b501f7 100644
+--- lib/sanitizer_common/sanitizer_platform_limits_posix.h
++++ lib/sanitizer_common/sanitizer_platform_limits_posix.h
+@@ -489,7 +489,8 @@ namespace __sanitizer {
+   };
+ #elif SANITIZER_FREEBSD
+   struct __sanitizer_dirent {
+-    unsigned int d_fileno;
++    unsigned long long d_fileno;
++    unsigned long long d_off;
+     unsigned short d_reclen;
+     // more fields that we don't care about
+   };

Property changes on: devel/llvm39/files/compiler-rt-patch-ino64
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: devel/llvm40/Makefile
===================================================================
--- devel/llvm40/Makefile	(revision 437869)
+++ devel/llvm40/Makefile	(working copy)
@@ -326,6 +326,9 @@
 post-extract-OPENMP-on:
 	${MV} ${WRKSRC_openmp} ${PATCH_WRKSRC}/tools/openmp
 
+post-patch-COMPILER_RT-on:
+	cd ${WRKSRC_compiler_rt} && patch < ${PATCHDIR}/compiler-rt-patch-ino64
+
 post-patch:
 	${REINPLACE_CMD} -e 's|import lit|import lit${LLVM_SUFFIX}|' \
 	    -e 's|from lit|from lit${LLVM_SUFFIX}|' \
Index: devel/llvm40/files/compiler-rt-patch-ino64
===================================================================
--- devel/llvm40/files/compiler-rt-patch-ino64	(nonexistent)
+++ devel/llvm40/files/compiler-rt-patch-ino64	(working copy)
@@ -0,0 +1,49 @@
+diff --git lib/sanitizer_common/sanitizer_linux.cc lib/sanitizer_common/sanitizer_linux.cc
+index 7328a5c0ac1..4b59a39ee27 100644
+--- lib/sanitizer_common/sanitizer_linux.cc
++++ lib/sanitizer_common/sanitizer_linux.cc
+@@ -223,7 +223,8 @@ static void kernel_stat_to_stat(struct kernel_stat *in, struct stat *out) {
+ 
+ uptr internal_stat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(stat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                          (uptr)buf, 0);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                           (uptr)buf, 0);
+@@ -247,7 +248,8 @@ uptr internal_stat(const char *path, void *buf) {
+ 
+ uptr internal_lstat(const char *path, void *buf) {
+ #if SANITIZER_FREEBSD
+-  return internal_syscall(SYSCALL(lstat), path, buf);
++  return internal_syscall(SYSCALL(fstatat), AT_FDCWD, (uptr)path,
++                         (uptr)buf, AT_SYMLINK_NOFOLLOW);
+ #elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(newfstatat), AT_FDCWD, (uptr)path,
+                          (uptr)buf, AT_SYMLINK_NOFOLLOW);
+@@ -590,7 +592,9 @@ uptr internal_getppid() {
+ }
+ 
+ uptr internal_getdents(fd_t fd, struct linux_dirent *dirp, unsigned int count) {
+-#if SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
++#if SANITIZER_FREEBSD
++  return internal_syscall(SYSCALL(getdirentries), fd, (uptr)dirp, count, NULL);
++#elif SANITIZER_USES_CANONICAL_LINUX_SYSCALLS
+   return internal_syscall(SYSCALL(getdents64), fd, (uptr)dirp, count);
+ #else
+   return internal_syscall(SYSCALL(getdents), fd, (uptr)dirp, count);
+diff --git lib/sanitizer_common/sanitizer_platform_limits_posix.h lib/sanitizer_common/sanitizer_platform_limits_posix.h
+index 5cbd78d3c1b..d7ce7b501f7 100644
+--- lib/sanitizer_common/sanitizer_platform_limits_posix.h
++++ lib/sanitizer_common/sanitizer_platform_limits_posix.h
+@@ -489,7 +489,8 @@ namespace __sanitizer {
+   };
+ #elif SANITIZER_FREEBSD
+   struct __sanitizer_dirent {
+-    unsigned int d_fileno;
++    unsigned long long d_fileno;
++    unsigned long long d_off;
+     unsigned short d_reclen;
+     // more fields that we don't care about
+   };

Property changes on: devel/llvm40/files/compiler-rt-patch-ino64
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: lang/ghc/Makefile
===================================================================
--- lang/ghc/Makefile	(revision 437869)
+++ lang/ghc/Makefile	(working copy)
@@ -239,6 +239,9 @@
 	@${REINPLACE_CMD} -e 's|@SettingsCCompilerFlags@|& -Qunused-arguments|' ${BOOT_DIR}/settings.in
 .endif
 .endif
+.if empty(PORT_OPTIONS:MBOOT)
+	@${REINPLACE_CMD} -e 's|@SettingsCCompilerLinkFlags@|& -Wl,--wrap=readdir_r,--wrap=stat,--wrap=lstat,--wrap=fstat,--wrap=mknod|' ${BOOT_DIR}/settings.in
+.endif
 
 post-install-script:
 	@${FIND} -ds ${GHC_LIBDIR} -type f -print | ${SED} -E -e \
@@ -266,6 +269,13 @@
 		s|%%AR%%|${AR}|; \
 		s|%%LD%%|${LD}|' \
 		${WRKSRC}/libraries/Cabal/Cabal/Distribution/Simple/Program/Builtin.hs
+.if empty(PORT_OPTIONS:MBOOTH)
+	${CC} ${CFLAGS} -c -o ${BOOT_DIR}/wrap.o ${PATCHDIR}/wrap.c
+	for x in ${BOOT_DIR}/rts/dist/build/libCffi*.a; do \
+	    ${AR} q $$x ${BOOT_DIR}/wrap.o; ${RANLIB} $$x; \
+	done
+	rm ${BOOT_DIR}/wrap.o
+.endif
 
 pre-configure:
 	@${MKDIR} ${TMPDIR}
Index: lang/ghc/files/wrap.c
===================================================================
--- lang/ghc/files/wrap.c	(nonexistent)
+++ lang/ghc/files/wrap.c	(working copy)
@@ -0,0 +1,54 @@
+/* -*- ugly-hack-mode -*- */
+
+#include <sys/stat.h>
+
+struct old_dirent;
+struct old_stat;
+
+__asm(".symver	old_readdir_r, readdir_r@FBSD_1.0");
+int old_readdir_r(void *dirp, struct old_dirent *entry,
+    struct old_dirent **result);
+__asm(".symver	old_stat, stat@FBSD_1.0");
+int old_stat(const char * restrict path, struct old_stat * restrict sb);
+__asm(".symver	old_lstat, lstat@FBSD_1.0");
+int old_lstat(const char * restrict path, struct old_stat * restrict sb);
+__asm(".symver	old_fstat, fstat@FBSD_1.0");
+int old_fstat(int fd, struct old_stat *sb);
+__asm(".symver	old_mknod, mknod@FBSD_1.0");
+int old_mknod(const char *path, mode_t mode, uint32_t dev);
+
+int
+__wrap_readdir_r(void *dirp, struct old_dirent *entry,
+    struct old_dirent **result)
+{
+
+	return (old_readdir_r(dirp, entry, result));
+}
+
+int
+__wrap_stat(const char * restrict path, struct old_stat * restrict sb)
+{
+
+	return (old_stat(path, sb));
+}
+
+int
+__wrap_lstat(const char * restrict path, struct old_stat * restrict sb)
+{
+
+	return (old_lstat(path, sb));
+}
+
+int
+__wrap_fstat(int fd, struct old_stat *sb)
+{
+
+	return (old_fstat(fd, sb));
+}
+
+int
+__wrap_mknod(const char *path, mode_t mode, uint32_t dev)
+{
+
+	return (old_mknod(path, mode, dev));
+}

Property changes on: lang/ghc/files/wrap.c
___________________________________________________________________
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: lang/rust/files/patch-ino64
===================================================================
--- lang/rust/files/patch-ino64	(nonexistent)
+++ lang/rust/files/patch-ino64	(working copy)
@@ -0,0 +1,104 @@
+--- src/liblibc/src/unix/bsd/freebsdlike/freebsd/mod.rs.orig	2017-04-08 22:42:18.303611000 +0000
++++ src/liblibc/src/unix/bsd/freebsdlike/freebsd/mod.rs	2017-04-08 22:48:15.613751000 +0000
+@@ -1,8 +1,8 @@
+ pub type fflags_t = u32;
+ pub type clock_t = i32;
+-pub type ino_t = u32;
++pub type ino_t = u64;
+ pub type lwpid_t = i32;
+-pub type nlink_t = u16;
++pub type nlink_t = u64;
+ pub type blksize_t = u32;
+ pub type clockid_t = ::c_int;
+ pub type sem_t = _sem;
+@@ -39,10 +39,12 @@
+     }
+ 
+     pub struct dirent {
+-        pub d_fileno: u32,
++        pub d_fileno: u64,
++	pud d_off: u64,
+         pub d_reclen: u16,
+         pub d_type: u8,
+         pub d_namlen: u8,
++	pub d_pad0: u32,
+         pub d_name: [::c_char; 256],
+     }
+ 
+--- src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86.rs.orig	2017-04-08 22:43:55.204868000 +0000
++++ src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86.rs	2017-04-08 22:51:55.756029000 +0000
+@@ -7,10 +7,12 @@
+     pub struct stat {
+         pub st_dev: ::dev_t,
+         pub st_ino: ::ino_t,
+-        pub st_mode: ::mode_t,
+         pub st_nlink: ::nlink_t,
++        pub st_mode: ::mode_t,
++	pub st_pad0: ::uint16_t,
+         pub st_uid: ::uid_t,
+         pub st_gid: ::gid_t,
++	pub st_pad1: ::uint32_t,
+         pub st_rdev: ::dev_t,
+         pub st_atime: ::time_t,
+         pub st_atime_nsec: ::c_long,
+@@ -18,14 +20,13 @@
+         pub st_mtime_nsec: ::c_long,
+         pub st_ctime: ::time_t,
+         pub st_ctime_nsec: ::c_long,
++        pub st_birthtime: ::time_t,
++        pub st_birthtime_nsec: ::c_long,
+         pub st_size: ::off_t,
+         pub st_blocks: ::blkcnt_t,
+         pub st_blksize: ::blksize_t,
+         pub st_flags: ::fflags_t,
+-        pub st_gen: ::uint32_t,
+-        pub st_lspare: ::int32_t,
+-        pub st_birthtime: ::time_t,
+-        pub st_birthtime_nsec: ::c_long,
+-        __unused: [u8; 8],
++        pub st_gen: ::uint64_t,
++        pub st_lspare: [::uint64_t; 10],
+     }
+ }
+--- src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs.orig	2017-04-08 22:48:52.848685000 +0000
++++ src/liblibc/src/unix/bsd/freebsdlike/freebsd/x86_64.rs	2017-04-08 22:51:19.715863000 +0000
+@@ -7,10 +7,12 @@
+     pub struct stat {
+         pub st_dev: ::dev_t,
+         pub st_ino: ::ino_t,
+-        pub st_mode: ::mode_t,
+         pub st_nlink: ::nlink_t,
++        pub st_mode: ::mode_t,
++	pub st_pad0: ::uint16_t,
+         pub st_uid: ::uid_t,
+         pub st_gid: ::gid_t,
++	pub st_pad1: ::uint32_t,
+         pub st_rdev: ::dev_t,
+         pub st_atime: ::time_t,
+         pub st_atime_nsec: ::c_long,
+@@ -18,13 +20,13 @@
+         pub st_mtime_nsec: ::c_long,
+         pub st_ctime: ::time_t,
+         pub st_ctime_nsec: ::c_long,
++        pub st_birthtime: ::time_t,
++        pub st_birthtime_nsec: ::c_long,
+         pub st_size: ::off_t,
+         pub st_blocks: ::blkcnt_t,
+         pub st_blksize: ::blksize_t,
+         pub st_flags: ::fflags_t,
+-        pub st_gen: ::uint32_t,
+-        pub st_lspare: ::int32_t,
+-        pub st_birthtime: ::time_t,
+-        pub st_birthtime_nsec: ::c_long,
++        pub st_gen: ::uint64_t,
++        pub st_spare: [::int64_t; 10],
+     }
+ }
+--- src/liblibc/src/unix/bsd/freebsdlike/mod.rs.orig	2017-04-08 22:53:10.232283000 +0000
++++ src/liblibc/src/unix/bsd/freebsdlike/mod.rs	2017-04-08 22:53:34.912151000 +0000
+@@ -1,4 +1,4 @@
+-pub type dev_t = u32;
++pub type dev_t = u64;
+ pub type mode_t = u16;
+ pub type pthread_attr_t = *mut ::c_void;
+ pub type rlim_t = i64;

Property changes on: lang/rust/files/patch-ino64
___________________________________________________________________
Added: fbsd:nokeywords
## -0,0 +1 ##
+yes
\ No newline at end of property
Added: svn:eol-style
## -0,0 +1 ##
+native
\ No newline at end of property
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
